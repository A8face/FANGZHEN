import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.interpolate import interp1d
from matplotlib.lines import Line2D
import os  # 添加os模块用于路径操作

# 加载数据
file_path = r"C:\Users\lenovo\Desktop\新建文件夹\毕业论文\小论文2\故障模拟数据\Indicator diagram during air filter faults (2).csv"
data = pd.read_csv(file_path)
data.columns = ['x1', 'y1', 'x2', 'y2', 'x3', 'y3']

# 插值处理函数
def interpolate_data(x, y, num_points=10000):
    f = interp1d(x, y, kind='linear', fill_value="extrapolate")
    x_new = np.linspace(min(x), max(x), num_points)
    return x_new, f(x_new)

x1_new, y1_new = interpolate_data(data['x1'], data['y1'])
x2_new, y2_new = interpolate_data(data['x2'], data['y2'])
x3_new, y3_new = interpolate_data(data['x3'], data['y3'], 10000)

# 可视化参数设置
colors = ['#604771', '#846992', '#995a70', '#d5bfc2', '#e7d5be']
linestyles = ['-', '--', '-.'] 
linewidth = 2  # 全局线宽控制参数
labels = ['Intake Phase', 'Compression Phase', 'Power Phase']

plt.figure(figsize=(12, 7))

def smooth_weight(x, center=0, sigma=50):
    return np.exp(-(x - center)**2 / (2*sigma**2))

# 绘制原始曲线（0%污垢）---------------------------------------------
# 添加统一的linewidth参数
plt.plot(x1_new, y1_new, color=colors[0], linestyle=linestyles[0], 
         linewidth=linewidth, label='_nolegend_')
plt.plot(x2_new, y2_new, color=colors[0], linestyle=linestyles[1], 
         linewidth=linewidth, label='_nolegend_')
plt.plot(x3_new, y3_new, color=colors[0], linestyle=linestyles[2], 
         linewidth=linewidth, label='_nolegend_')

# 生成噪声函数
def generate_noise(x, scale=1.0, length_scale=30):
    np.random.seed(int(abs(sum(x))%1000)) 
    n_points = len(x)
    noise = np.random.normal(0, scale, n_points//length_scale + 1)
    x_interp = np.linspace(min(x), max(x), n_points//length_scale + 1)
    f = interp1d(x_interp, noise, kind='linear', fill_value="extrapolate")
    return f(x) * smooth_weight(x, sigma=80) 

# 燃烧速率曲线（实线）---------------------------------------------
for i in range(1, 5):
    weights = smooth_weight(x1_new)
    noise = generate_noise(x1_new, scale=0.2*i, length_scale=40) 
    offset_x = x1_new - 1*i*weights*(1 + 0.1*np.sin(x1_new/50)) + noise
    plt.plot(offset_x, y1_new, color=colors[i], 
             linestyle=linestyles[0], linewidth=linewidth, alpha=0.8)

# 喷油器针阀升程曲线（虚线）---------------------------------------
for i in range(1, 5):
    weights = smooth_weight(x2_new, sigma=40)
    angle_effect = np.sin(np.radians(x2_new/2)) 
    noise_x = generate_noise(x2_new, scale=0.3*i, length_scale=50)
    noise_y = generate_noise(x2_new, scale=0.5*i, length_scale=70)
    
    offset_x = x2_new - 1*i*weights*(1 + 0.05*angle_effect) + noise_x
    offset_y = y2_new + 1*i*weights*(1 + 0.1*np.cos(np.radians(x2_new))) + noise_y
    plt.plot(offset_x, offset_y, color=colors[i],
             linestyle=linestyles[1], linewidth=linewidth, alpha=0.8)

# 示功图曲线（点划线）------------------------------------------
for i in range(1, 5):
    weights = smooth_weight(x3_new)
    base_offset = 20*i*weights
    noise_low = generate_noise(x3_new, scale=0.8*i, length_scale=60)
    noise_high = np.random.normal(0, 0.3*i, len(x3_new))
    offset_y = y3_new + base_offset + noise_low + noise_high*weights
    plt.plot(x3_new, offset_y, color=colors[i],
             linestyle=linestyles[2], linewidth=linewidth, alpha=0.8)

# 坐标轴设置
plt.xlim(-180, 180)
plt.ylim(0, 220)
plt.xlabel('Crank Angle (degrees)')
plt.ylabel('Cylinder Pressure (bar)')  # 修改纵轴标签为 bar
plt.grid(True)

# 创建百分比图例（统一线宽）-------------------------------------
percent_legend = [Line2D([0], [0], color=c, lw=linewidth, label=f'{i*10}%') 
                 for i, c in enumerate(colors)]

# 创建曲线类型图例（统一线宽）-----------------------------------
curve_type_legend = [
    Line2D([0], [0], color='black', linestyle=linestyles[2], 
           lw=linewidth, label='INDICATOR DIAGRAM CURVE'),
    Line2D([0], [0], color='black', linestyle=linestyles[1], 
           lw=linewidth, label='INJECTOR NEEDLE VALVE LIFT CURVE'),
    Line2D([0], [0], color='black', linestyle=linestyles[0], 
           lw=linewidth, label='COMBUSTION RATE CURVE')
]

# 组合图例
plt.legend(handles=percent_legend + curve_type_legend, 
           ncol=2, 
           loc='upper left',
           frameon=True)

# 图表保存路径
save_path = r"C:\Users\lenovo\Desktop\新建文件夹\毕业论文\小论文2\故障模拟数据\tupian"
if not os.path.exists(save_path):
    os.makedirs(save_path)

# 保存图表
plt.savefig(os.path.join(save_path, 'chart.png'), dpi=300, bbox_inches='tight')

plt.tight_layout()
plt.show()
